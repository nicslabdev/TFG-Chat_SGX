


enclave {

    include "user_types.h"
    include "sgx_tcrypto.h"

    
    from "Edger8rSyntax/Types.edl" import *;
    from "Edger8rSyntax/Pointers.edl" import *;
    from "Edger8rSyntax/Arrays.edl" import *;
    from "Edger8rSyntax/Functions.edl" import *;

    from "TrustedLibrary/Libc.edl" import *;
    from "TrustedLibrary/Libcxx.edl" import ecall_exception, ecall_map;
    from "TrustedLibrary/Thread.edl" import *;

    trusted{

	    public void new_keypair([out, size=len] sgx_ec256_public_t *extern_pk, size_t len);                                                                                                     

        public void computeDHKey([in, size=len]  sgx_ec256_public_t *extern_pk, size_t len);          

        public void cypher_in([in,size=lenIn] char *decMessageIn, size_t lenIn, [out,size=lenOut] char *encMessageOut, size_t lenOut);
        public void cypher_out([in,size=lenIn] char *encMessageIn, size_t lenIn, [out,size=lenOut] char *decMessageOut, size_t lenOut);
        public void autoset_key(int Rol, [in,size=len] uint8_t* randB, size_t len);

        public void get_rand(int rol, [out,size=len] uint8_t* pointer, size_t len);

    };
    
    untrusted{


        //OCALL's

        void ocall_print_string([in, string] const char *str);         //Función usada en debug para mostrar información interna del enclave sin extraerta.
	
    };

};
